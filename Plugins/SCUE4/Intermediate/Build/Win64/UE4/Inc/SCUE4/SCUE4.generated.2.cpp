// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "SCUE4.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode2SCUE4() {}
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector4();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeTransform();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeRotator();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeColor();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeVector4D();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeVector3D();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeVector2D();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeText();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeString();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeName();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeFloat();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeInt();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeByte();
	SCUE4_API class UScriptStruct* Z_Construct_UScriptStruct_FSafeBool();
	SCUE4_API class UClass* Z_Construct_UClass_USCUE4Settings_NoRegister();
	SCUE4_API class UClass* Z_Construct_UClass_USCUE4Settings();
	SCUE4_API class UFunction* Z_Construct_UFunction_USafeGameInstance_HideGameGuardConsole();
	SCUE4_API class UClass* Z_Construct_UClass_USafeGameInstance_NoRegister();
	SCUE4_API class UClass* Z_Construct_UClass_USafeGameInstance();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeBoolWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeByteWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeColorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeFloatWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeIntWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeNameWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeRotatorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeStringWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeTextWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeTransformWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector2DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector3DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_GetSafeVector4DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeBoolWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeByteWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeColorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeFloatWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeIntWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeNameWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeRotatorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeStringWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeTextWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeTransformWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector2DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector3DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Callable_SetSafeVector4DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeBoolWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeByteWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeColorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeFloatWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeIntWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeNameWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeRotatorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeStringWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeTextWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeTransformWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector2DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector3DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_GetSafeVector4DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeBoolWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeByteWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeColorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeFloatWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeIntWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeNameWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeRotatorWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeStringWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeTextWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeTransformWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector2DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector3DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCL_Pure_SetSafeVector4DWithKey();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBoolAndFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBoolEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBoolNotEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBoolOrFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteAndFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteDivideFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteGreaterEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteGreaterFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteMinusEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteMinusFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteModFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteNotEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteOrFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBytePlusEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetBytePlusFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteShiftLFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteShiftRFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteSmallerEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteSmallerFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteTimesFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetByteXorFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetColorEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetColorNotEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatDivideFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatGreaterEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatGreaterFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatMinusEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatMinusFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatModFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatNotEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatPlusEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatPlusFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatSmallerEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatSmallerFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetFloatTimesFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntAndFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntDivideFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntGreaterEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntGreaterFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntMinusEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntMinusFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntModFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntNotEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntOrFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntPlusEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntPlusFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntShiftLFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntShiftRFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntSmallerEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntSmallerFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntTimesFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntXorFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameGreaterFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameNotEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNamePlusEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNamePlusFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameSmallerFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorDivideFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorGreaterFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorMinusEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorMinusFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorModFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorNotEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorPlusEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorPlusFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorSmallerFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorTimesFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolAndBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolAndFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolEqualBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolNotEqualBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolOrBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolOrFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteAndByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteAndFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDecreaseFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDivideByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDivideFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteIncreaseFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteModByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteModFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteOrByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteOrFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftLByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftLFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftRByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftRFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteTimesByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteTimesFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteXorByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteXorFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorEqualColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorNotEqualColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorNotEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDivideFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDivideFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatModFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatModFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatTimesFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatTimesFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntAndFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntAndInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDecreaseFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDivideFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDivideInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntIncreaseFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntModFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntModInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntOrFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntOrInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftLFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftLInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftRFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftRInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntTimesFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntTimesInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntXorFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntXorInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameEqualName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameGreaterFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameGreaterName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameNotEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameNotEqualName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusEqualName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameSmallerFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameSmallerName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDecreaseFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDivideFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDivideRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorIncreaseFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorModFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorModRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorTimesFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorTimesRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringEqualString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringGreaterFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringGreaterString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringNotEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringNotEqualString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusEqualString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringSmallerFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringSmallerString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextEqualText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextGreaterFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextGreaterText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextNotEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextNotEqualText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusEqualText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextSmallerFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextSmallerText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformEqualTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformNotEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDecreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DIncreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DModVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDecreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DIncreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DModVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDecreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DIncreaseFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DModVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringGreaterFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringNotEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringPlusEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringPlusFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringSmallerFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextGreaterFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextNotEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextPlusEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextPlusFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextSmallerFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTransformEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTransformNotEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DDivideFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DGreaterFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DMinusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DMinusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DModFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DNotEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DPlusEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DPlusFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DSmallerFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DTimesFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetBoolEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetByteEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetColorEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetFloatEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetIntEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetNameEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetRotatorEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeBoolEqualBool();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeBoolEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeByteEqualByte();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeByteEqualFSB();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeColorEqualColor();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeColorEqualFSC();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeFloatEqualFloat();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeFloatEqualFSF();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeIntEqualFSI();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeIntEqualInt();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeNameEqualFSN();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeNameEqualName();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeRotatorEqualFSR();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeRotatorEqualRotator();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeStringEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeStringEqualString();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTextEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTextEqualText();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTransformEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTransformEqualTransform();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector2DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector3DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector4DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetStringEqualFSS();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetTextEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetTransformEqualFST();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector2DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector3DEqualFSV();
	SCUE4_API class UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector4DEqualFSV();
	SCUE4_API class UClass* Z_Construct_UClass_USCLibrary_NoRegister();
	SCUE4_API class UClass* Z_Construct_UClass_USCLibrary();
	SCUE4_API class UPackage* Z_Construct_UPackage__Script_SCUE4();
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntModFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntModFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntModFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntModFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntModFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntModFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntModFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer % Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntNotEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntNotEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntNotEqualFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer != Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntOrFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntOrFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntOrFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntOrFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntOrFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntOrFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntOrFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("| (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer OR |"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer | Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntPlusEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntPlusEqualFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntPlusEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntPlusEqualFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntPlusEqualFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntPlusEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntPlusEqualFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer += Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntPlusFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntPlusFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntPlusFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntPlusFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntPlusFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntPlusFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntPlusFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer + Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntShiftLFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntShiftLFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntShiftLFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntShiftLFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntShiftLFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntShiftLFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntShiftLFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<< (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT <<"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer << Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntShiftRFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntShiftRFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntShiftRFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntShiftRFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntShiftRFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntShiftRFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntShiftRFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">> (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT >>"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer >> Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntSmallerEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntSmallerEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntSmallerEqualFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer <= Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntSmallerFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntSmallerFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntSmallerFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer < Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntTimesFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntTimesFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntTimesFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntTimesFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntTimesFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntTimesFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntTimesFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer * Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetIntXorFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetIntXorFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetIntXorFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetIntXorFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetIntXorFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetIntXorFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetIntXorFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("^ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer XOR ^"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Integer ^ Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNameEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNameEqualFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name == Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameGreaterFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNameGreaterFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNameGreaterFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name > Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameNotEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNameNotEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNameNotEqualFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name != Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNamePlusEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNamePlusEqualFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNamePlusEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNamePlusEqualFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetNamePlusEqualFSN_Parms), 0x0010000000000580);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNamePlusEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNamePlusEqualFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name += Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNamePlusFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNamePlusFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNamePlusFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNamePlusFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetNamePlusFSN_Parms), 0x0010000000000580);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNamePlusFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNamePlusFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name + Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetNameSmallerFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetNameSmallerFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetNameSmallerFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Name < Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorDivideFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorDivideFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorDivideFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorDivideFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorDivideFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorDivideFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorDivideFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator / Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator == Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorGreaterEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorGreaterEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorGreaterEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator >= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorGreaterFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorGreaterFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorGreaterFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator > Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorMinusEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorMinusEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorMinusEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorMinusEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorMinusEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorMinusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorMinusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator -= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorMinusFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorMinusFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorMinusFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorMinusFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorMinusFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorMinusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorMinusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator - Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorModFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorModFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorModFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorModFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorModFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorModFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorModFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator % Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorNotEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorNotEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorNotEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator != Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorPlusEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorPlusEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorPlusEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorPlusEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorPlusEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorPlusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorPlusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator += Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorPlusFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorPlusFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorPlusFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorPlusFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorPlusFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorPlusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorPlusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator + Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorSmallerEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorSmallerEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorSmallerEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator <= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorSmallerFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorSmallerFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorSmallerFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator < Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetRotatorTimesFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetRotatorTimesFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetRotatorTimesFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetRotatorTimesFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetRotatorTimesFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetRotatorTimesFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetRotatorTimesFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Rotator * Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolAndBool()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms
		{
			FSafeBool FSB;
			bool NB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolAndBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolAndBool_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("&& (Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool AND &&"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool && Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolAndFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms
		{
			FSafeBool FSB;
			FSafeBool SSB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolAndFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolAndFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("&& (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool AND &&"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool && Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolEqualBool()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms
		{
			FSafeBool FSB;
			bool NB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolEqualBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualBool_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool == Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms
		{
			FSafeBool FSB;
			FSafeBool SSB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool == Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolNotEqualBool()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms
		{
			FSafeBool FSB;
			bool NB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolNotEqualBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualBool_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool != Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolNotEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms
		{
			FSafeBool FSB;
			FSafeBool SSB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolNotEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolNotEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool != Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolOrBool()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms
		{
			FSafeBool FSB;
			bool NB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolOrBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolOrBool_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("||"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("|| (Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool OR ||"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool || Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBoolOrFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms
		{
			FSafeBool FSB;
			FSafeBool SSB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBoolOrFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBoolOrFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("||"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("|| (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Bool OR ||"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Bool || Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteAndByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteAndByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteAndByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("& (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte AND &"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte & Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteAndFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteAndFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteAndFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("& (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte AND &"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte & Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDecreaseFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteDecreaseFSB_Parms
		{
			FSafeByte FSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteDecreaseFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteDecreaseFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteDecreaseFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteDecreaseFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteDecreaseFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDivideByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteDivideByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteDivideByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte / Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteDivideFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteDivideFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteDivideFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte / Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte == Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte == Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteGreaterByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte > Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteGreaterEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte >= Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteGreaterEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte >= Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteGreaterFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteGreaterFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteGreaterFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte > Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteIncreaseFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteIncreaseFSB_Parms
		{
			FSafeByte FSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteIncreaseFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteIncreaseFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteIncreaseFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteIncreaseFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteIncreaseFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteMinusByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte - Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteMinusEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte -= Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteMinusEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte -= Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteMinusFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteMinusFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteMinusFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte - Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteModByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteModByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteModByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte % Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteModFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteModFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteModFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte % Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteNotByte_Parms
		{
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteNotByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteNotByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteNotByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteNotByte_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("~"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("~ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte NOT ~"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte ~"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteNotEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte != Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteNotEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteNotEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte != Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteNotFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteNotFSB_Parms
		{
			FSafeByte FSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteNotFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteNotFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteNotFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteNotFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteNotFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("~"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("~ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte NOT ~"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte ~"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteOrByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteOrByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteOrByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("| (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte OR |"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte | Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteOrFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteOrFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteOrFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("| (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte OR |"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte | Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBytePlusByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte + Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBytePlusEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte += Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBytePlusEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte += Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeBytePlusFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeBytePlusFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeBytePlusFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte + Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftLByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteShiftLByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftLByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<< (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte SHIFT <<"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte << Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftLFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteShiftLFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftLFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<< (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte SHIFT <<"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte << Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftRByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteShiftRByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftRByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">> (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte SHIFT >>"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte >> Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteShiftRFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteShiftRFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteShiftRFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">> (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte SHIFT >>"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte >> Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteSmallerByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte < Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteSmallerEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms), sizeof(bool), true);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte <= Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteSmallerEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte <= Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteSmallerFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteSmallerFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteSmallerFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte < Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteTimesByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteTimesByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteTimesByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte * Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteTimesFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteTimesFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteTimesFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte * Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteXorByte()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteXorByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteXorByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("^ (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte XOR ^"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte ^ Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeByteXorFSB()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeByteXorFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_GetSafeByteXorFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("^ (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Byte XOR ^"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Byte ^ Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorEqualColor()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms
		{
			FSafeColor FSC;
			FLinearColor NC;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeColorEqualColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms), sizeof(bool), true);
			UProperty* NewProp_NC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NC, SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_GetSafeColorEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Color EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Color == Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorEqualFSC()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms
		{
			FSafeColor FSC;
			FSafeColor SSC;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeColorEqualFSC"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms), sizeof(bool), true);
			UProperty* NewProp_SSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSC, SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_GetSafeColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Color EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Color == Safe Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorNotEqualColor()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms
		{
			FSafeColor FSC;
			FLinearColor NC;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeColorNotEqualColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms), sizeof(bool), true);
			UProperty* NewProp_NC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NC, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Color NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Color != Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeColorNotEqualFSC()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms
		{
			FSafeColor FSC;
			FSafeColor SSC;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeColorNotEqualFSC"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms), sizeof(bool), true);
			UProperty* NewProp_SSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSC, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_GetSafeColorNotEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Color NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Color != Safe Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDecreaseFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatDecreaseFSF_Parms
		{
			FSafeFloat FSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatDecreaseFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatDecreaseFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatDecreaseFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatDecreaseFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatDecreaseFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDivideFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatDivideFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float / Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatDivideFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatDivideFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatDivideFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float / Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float == Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float == Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatGreaterEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float >= Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatGreaterEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float >= Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatGreaterFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float > Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatGreaterFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatGreaterFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatGreaterFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float > Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatIncreaseFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatIncreaseFSF_Parms
		{
			FSafeFloat FSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatIncreaseFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatIncreaseFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatIncreaseFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatIncreaseFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatIncreaseFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatMinusEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float -= Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatMinusEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float -= Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatMinusFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float - Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatMinusFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatMinusFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatMinusFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float - Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatModFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatModFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatModFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float % Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatModFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatModFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatModFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float % Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatNotEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatNotEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float != Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatNotEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatNotEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatNotEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float != Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatPlusEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float += Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatPlusEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float += Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatPlusFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float + Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatPlusFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatPlusFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatPlusFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float + Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatSmallerEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float <= Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatSmallerEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float <= Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatSmallerFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float < Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatSmallerFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatSmallerFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms), sizeof(bool), true);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatSmallerFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float < Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatTimesFloat()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatTimesFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float * Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeFloatTimesFSF()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeFloatTimesFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_GetSafeFloatTimesFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Float TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Float * Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntAndFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntAndFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntAndFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("& (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer AND &"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer & Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntAndInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntAndInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntAndInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("&"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("& (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer AND &"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer & Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDecreaseFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntDecreaseFSI_Parms
		{
			FSafeInt FSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntDecreaseFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntDecreaseFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntDecreaseFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntDecreaseFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntDecreaseFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDivideFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntDivideFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntDivideFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer / Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntDivideInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntDivideInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntDivideInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer / Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer == Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer == Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntGreaterEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer >= Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntGreaterEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer >= Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntGreaterFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer > Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntGreaterInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntGreaterInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntGreaterInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer > Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntIncreaseFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntIncreaseFSI_Parms
		{
			FSafeInt FSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntIncreaseFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntIncreaseFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntIncreaseFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntIncreaseFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntIncreaseFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntMinusEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer -= Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntMinusEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer -= Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntMinusFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer - Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntMinusInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntMinusInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntMinusInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer - Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntModFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntModFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntModFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer % Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntModInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntModInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntModInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer % Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntNotEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer != Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntNotEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntNotEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer != Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntNotFSI_Parms
		{
			FSafeInt FSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntNotFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntNotFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntNotFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntNotFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("~"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("~ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer NOT ~"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer ~"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntNotInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntNotInt_Parms
		{
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntNotInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntNotInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntNotInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntNotInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntNotInt_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("~"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("~ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer NOT ~"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer ~"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntOrFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntOrFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntOrFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("| (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer OR |"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer | Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntOrInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntOrInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntOrInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("|"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("| (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer OR |"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer | Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntPlusEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer += Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntPlusEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer += Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntPlusFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer + Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntPlusInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntPlusInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntPlusInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer + Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftLFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntShiftLFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftLFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<< (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT <<"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer << Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftLInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntShiftLInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftLInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<< (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT <<"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer << Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftRFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntShiftRFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftRFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">> (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT >>"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer >> Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntShiftRInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntShiftRInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntShiftRInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">>"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">> (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer SHIFT >>"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer >> Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntSmallerEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer <= Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntSmallerEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer <= Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntSmallerFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms), sizeof(bool), true);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer < Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntSmallerInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntSmallerInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms), sizeof(bool), true);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntSmallerInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer < Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntTimesFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntTimesFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntTimesFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer * Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntTimesInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntTimesInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntTimesInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer * Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntXorFSI()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntXorFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntXorFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("^ (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer XOR ^"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer ^ Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeIntXorInt()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeIntXorInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_GetSafeIntXorInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("^"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("^ (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Integer XOR ^"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Integer ^ Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name == Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameEqualName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms
		{
			FSafeName FSN;
			FName NN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameEqualName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms), sizeof(bool), true);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameEqualName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name == Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameGreaterFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameGreaterFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameGreaterFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name > Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameGreaterName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms
		{
			FSafeName FSN;
			FName NN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameGreaterName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms), sizeof(bool), true);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameGreaterName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name > Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameNotEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameNotEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name != Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameNotEqualName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms
		{
			FSafeName FSN;
			FName NN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameNotEqualName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms), sizeof(bool), true);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameNotEqualName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name != Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNamePlusEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms), 0x0010000000000180);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name += Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusEqualName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms
		{
			FSafeName FSN;
			FName NN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNamePlusEqualName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms), 0x0010000000000180);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusEqualName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name += Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNamePlusFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms), 0x0010000000000180);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name + Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNamePlusName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms
		{
			FSafeName FSN;
			FName NN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNamePlusName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms), 0x0010000000000180);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNamePlusName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name + Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameSmallerFSN()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameSmallerFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms), sizeof(bool), true);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameSmallerFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name < Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeNameSmallerName()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms
		{
			FSafeName FSN;
			FName NN;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeNameSmallerName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms), sizeof(bool), true);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_GetSafeNameSmallerName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Name LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Name < Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDecreaseFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorDecreaseFSR_Parms
		{
			FSafeRotator FSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorDecreaseFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorDecreaseFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorDecreaseFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorDecreaseFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorDecreaseFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDivideFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorDivideFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator / Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorDivideRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorDivideRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorDivideRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator / Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator == Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator == Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorGreaterEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator >= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorGreaterEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator >= Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorGreaterFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator > Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorGreaterRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorGreaterRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorGreaterRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator > Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorIncreaseFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorIncreaseFSR_Parms
		{
			FSafeRotator FSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorIncreaseFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorIncreaseFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorIncreaseFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorIncreaseFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorIncreaseFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorMinusEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator -= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorMinusEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator -= Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorMinusFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator - Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorMinusRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorMinusRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorMinusRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator - Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorModFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorModFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorModFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator % Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorModRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorModRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorModRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator % Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorNotEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorNotEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator != Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorNotEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorNotEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorNotEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator != Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorPlusEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator += Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorPlusEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator += Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorPlusFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator + Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorPlusRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorPlusRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorPlusRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator + Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorSmallerEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator <= Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorSmallerEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator <= Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorSmallerFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms), sizeof(bool), true);
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator < Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorSmallerRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorSmallerRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms), sizeof(bool), true);
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorSmallerRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator < Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorTimesFSR()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorTimesFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator * Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeRotatorTimesRotator()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeRotatorTimesRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_GetSafeRotatorTimesRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Rotator TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Rotator * Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String == Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringEqualString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms
		{
			FSafeString FSS;
			FString NS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringEqualString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms), sizeof(bool), true);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringEqualString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String == String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringGreaterFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringGreaterFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringGreaterFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String > Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringGreaterString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms
		{
			FSafeString FSS;
			FString NS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringGreaterString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms), sizeof(bool), true);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringGreaterString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String > String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringNotEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringNotEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String != Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringNotEqualString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms
		{
			FSafeString FSS;
			FString NS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringNotEqualString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms), sizeof(bool), true);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringNotEqualString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String != String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringPlusEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms), 0x0010000000000180);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String += Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusEqualString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms
		{
			FSafeString FSS;
			FString NS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringPlusEqualString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms), 0x0010000000000180);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringPlusEqualString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String += String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringPlusFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms), 0x0010000000000180);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringPlusFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String + Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringPlusString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms
		{
			FSafeString FSS;
			FString NS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringPlusString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms), 0x0010000000000180);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringPlusString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String + String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringSmallerFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringSmallerFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringSmallerFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String < Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeStringSmallerString()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms
		{
			FSafeString FSS;
			FString NS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeStringSmallerString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms), sizeof(bool), true);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetSafeStringSmallerString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe String < String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text == Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextEqualText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms
		{
			FSafeText FST;
			FText NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextEqualText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextEqualText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text == Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextGreaterFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextGreaterFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms), sizeof(bool), true);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextGreaterFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text > Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextGreaterText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms
		{
			FSafeText FST;
			FText NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextGreaterText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextGreaterText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text > Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextNotEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextNotEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text != Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextNotEqualText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms
		{
			FSafeText FST;
			FText NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextNotEqualText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextNotEqualText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text != Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextPlusEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms), 0x0010000000000180);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text += Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusEqualText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms
		{
			FSafeText FST;
			FText NT;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextPlusEqualText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms), 0x0010000000000180);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextPlusEqualText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text += Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextPlusFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms), 0x0010000000000180);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextPlusFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text + Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextPlusText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms
		{
			FSafeText FST;
			FText NT;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextPlusText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms), 0x0010000000000180);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextPlusText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text + Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextSmallerFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextSmallerFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms), sizeof(bool), true);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextSmallerFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text LEST <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text < Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTextSmallerText()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms
		{
			FSafeText FST;
			FText NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTextSmallerText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTextSmallerText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text LEST <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Text < Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms
		{
			FSafeTransform FST;
			FSafeTransform SST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTransformEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_SST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SST, SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Transform == Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformEqualTransform()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms
		{
			FSafeTransform FST;
			FTransform NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTransformEqualTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTransformEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Transform == Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformNotEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms
		{
			FSafeTransform FST;
			FSafeTransform SST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTransformNotEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_SST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SST, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Transform != Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeTransformNotEqualTransform()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms
		{
			FSafeTransform FST;
			FTransform NT;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeTransformNotEqualTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms), sizeof(bool), true);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetSafeTransformNotEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Transform != Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDecreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DDecreaseFSV_Parms
		{
			FSafeVector2D FSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DDecreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DDecreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DDecreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DDecreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DDecreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D / Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DDivideVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DDivideVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DDivideVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D / Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D == Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D == Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D >= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DGreaterEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D >= Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D > Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DGreaterVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DGreaterVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DGreaterVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D > Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DIncreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DIncreaseFSV_Parms
		{
			FSafeVector2D FSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DIncreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DIncreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DIncreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DIncreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DIncreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D -= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DMinusEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D -= Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D - Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DMinusVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DMinusVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DMinusVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D - Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D % Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DModVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DModVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DModVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D % Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D != Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DNotEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DNotEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DNotEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D != Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D += Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DPlusEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D += Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D + Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DPlusVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DPlusVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DPlusVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D + Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D <= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DSmallerEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D <= Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D < Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DSmallerVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DSmallerVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DSmallerVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D < Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D * Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector2DTimesVector2D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector2DTimesVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector2DTimesVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector2D * Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDecreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DDecreaseFSV_Parms
		{
			FSafeVector3D FSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DDecreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DDecreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DDecreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DDecreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DDecreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D / Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DDivideVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DDivideVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DDivideVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D / Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D == Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D == Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D >= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DGreaterEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D >= Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D > Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DGreaterVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DGreaterVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DGreaterVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D > Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DIncreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DIncreaseFSV_Parms
		{
			FSafeVector3D FSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DIncreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DIncreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DIncreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DIncreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DIncreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D -= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DMinusEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D -= Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D - Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DMinusVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DMinusVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DMinusVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D - Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D % Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DModVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DModVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DModVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D % Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D != Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DNotEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DNotEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DNotEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D != Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D += Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DPlusEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D += Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D + Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DPlusVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DPlusVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DPlusVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D + Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D <= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DSmallerEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D <= Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D < Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DSmallerVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DSmallerVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DSmallerVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D < Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D * Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector3DTimesVector3D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector3DTimesVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector3DTimesVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector3D * Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDecreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DDecreaseFSV_Parms
		{
			FSafeVector4D FSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DDecreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DDecreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DDecreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DDecreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DDecreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("--"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-- (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS --"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D --"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D / Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DDivideVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DDivideVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DDivideVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D / Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D == Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D == Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D >= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DGreaterEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D >= Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D > Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DGreaterVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DGreaterVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DGreaterVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D > Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DIncreaseFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DIncreaseFSV_Parms
		{
			FSafeVector4D FSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DIncreaseFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DIncreaseFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DIncreaseFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DIncreaseFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DIncreaseFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("++"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("++ (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D ADD PLUS ++"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D ++"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D -= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DMinusEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D -= Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D - Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DMinusVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DMinusVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DMinusVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D - Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D % Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DModVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DModVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DModVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D % Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D != Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DNotEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DNotEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DNotEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D != Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D += Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DPlusEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D += Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D + Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DPlusVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DPlusVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DPlusVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D + Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D <= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DSmallerEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D <= Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D < Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DSmallerVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DSmallerVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms), sizeof(bool), true);
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DSmallerVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D < Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D * Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetSafeVector4DTimesVector4D()
	{
		struct SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetSafeVector4DTimesVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetSafeVector4DTimesVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Safe Vector4D * Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringEqualFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String == Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringGreaterFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringGreaterFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringGreaterFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String > Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringNotEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringNotEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringNotEqualFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String != Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringPlusEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringPlusEqualFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringPlusEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringPlusEqualFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetStringPlusEqualFSS_Parms), 0x0010000000000580);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringPlusEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringPlusEqualFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String += Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringPlusFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringPlusFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringPlusFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringPlusFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetStringPlusFSS_Parms), 0x0010000000000580);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringPlusFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringPlusFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String + Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetStringSmallerFSS()
	{
		struct SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetStringSmallerFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms), sizeof(bool), true);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_GetStringSmallerFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe String LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: String < Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms
		{
			FText NT;
			FSafeText FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextEqualFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text == Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextGreaterFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms
		{
			FText NT;
			FSafeText FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextGreaterFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextGreaterFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text > Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextNotEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms
		{
			FText NT;
			FSafeText FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextNotEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextNotEqualFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text != Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextPlusEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextPlusEqualFST_Parms
		{
			FText NT;
			FSafeText FST;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextPlusEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextPlusEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetTextPlusEqualFST_Parms), 0x0010000000000580);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextPlusEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextPlusEqualFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text += Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextPlusFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextPlusFST_Parms
		{
			FText NT;
			FSafeText FST;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextPlusFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextPlusFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetTextPlusFST_Parms), 0x0010000000000580);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextPlusFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextPlusFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text + Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTextSmallerFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms
		{
			FText NT;
			FSafeText FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTextSmallerFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTextSmallerFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Text LEST <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Text < Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTransformEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms
		{
			FTransform NT;
			FSafeTransform FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTransformEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Transform == Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetTransformNotEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms
		{
			FTransform NT;
			FSafeTransform FST;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetTransformNotEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms), sizeof(bool), true);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_GetTransformNotEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Transform NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Transform != Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DDivideFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D / Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D == Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D >= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D > Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DMinusEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D -= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DMinusFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D - Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DModFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D % Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D != Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DPlusEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D += Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DPlusFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D + Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D <= Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D < Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector2DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector2DTimesFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector2DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector2DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector2DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector2DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector2DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector2D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector2D * Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DDivideFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D / Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D == Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D >= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D > Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DMinusEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D -= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DMinusFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D - Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DModFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D % Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D != Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DPlusEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D += Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DPlusFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D + Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D <= Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D < Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector3DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector3DTimesFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector3DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector3DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector3DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector3DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector3DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector3D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector3D * Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DDivideFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DDivideFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DDivideFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DDivideFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DDivideFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DDivideFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("/"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("/ (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D DIVIDE /"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D / Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("=="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("== (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D EQUAL =="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D == Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DGreaterEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DGreaterEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DGreaterEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT(">= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER EQUAL >="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D >= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DGreaterFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DGreaterFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DGreaterFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT(">"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("> (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D GREATER >"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D > Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DMinusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DMinusEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DMinusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DMinusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DMinusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DMinusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("-= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS EQUAL -="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D -= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DMinusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DMinusFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DMinusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DMinusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DMinusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DMinusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("-"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("- (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MINUS -"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D - Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DModFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DModFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DModFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DModFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DModFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DModFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("%"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("% (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D MOD %"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D % Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DNotEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DNotEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DNotEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("!="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("!= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D NOT !="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D != Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DPlusEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DPlusEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DPlusEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DPlusEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DPlusEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DPlusEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS EQUAL +="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D += Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DPlusFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DPlusFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DPlusFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DPlusFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DPlusFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DPlusFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("+"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("+ (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D PLUS +"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D + Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DSmallerEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DSmallerEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DSmallerEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("<= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS EQUAL <="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D <= Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DSmallerFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DSmallerFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms), sizeof(bool), true);
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DSmallerFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("<"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("< (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D LESS <"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D < Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_GetVector4DTimesFSV()
	{
		struct SCLibrary_eventSCO_Pure_GetVector4DTimesFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_GetVector4DTimesFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_GetVector4DTimesFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_GetVector4DTimesFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_GetVector4DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_GetVector4DTimesFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("*"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("* (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Get Safe Vector4D TIMES *"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get:: Vector4D * Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetBoolEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms
		{
			bool NB;
			FSafeBool FSB;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetBoolEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_SetBoolEqualFSB_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Bool EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Bool = Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetByteEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_SetByteEqualFSB_Parms
		{
			uint8 NB;
			FSafeByte FSB;
			uint8 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetByteEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetByteEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetByteEqualFSB_Parms), 0x0010000000000580);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetByteEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_SetByteEqualFSB_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Byte EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Byte = Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetColorEqualFSC()
	{
		struct SCLibrary_eventSCO_Pure_SetColorEqualFSC_Parms
		{
			FLinearColor NC;
			FSafeColor FSC;
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetColorEqualFSC"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetColorEqualFSC_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetColorEqualFSC_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_SetColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_NC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NC, SCLibrary_eventSCO_Pure_SetColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Color EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Color = Safe Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetFloatEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_SetFloatEqualFSF_Parms
		{
			float NF;
			FSafeFloat FSF;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetFloatEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetFloatEqualFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetFloatEqualFSF_Parms), 0x0010000000000580);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_SetFloatEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_SetFloatEqualFSF_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Float EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Float = Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetIntEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_SetIntEqualFSI_Parms
		{
			int32 NI;
			FSafeInt FSI;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetIntEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetIntEqualFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetIntEqualFSI_Parms), 0x0010000000000580);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_SetIntEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_SetIntEqualFSI_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Integer EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Integer = Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetNameEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_SetNameEqualFSN_Parms
		{
			FName NN;
			FSafeName FSN;
			FName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetNameEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetNameEqualFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetNameEqualFSN_Parms), 0x0010000000000580);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_SetNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_SetNameEqualFSN_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Name EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Name = Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetRotatorEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_SetRotatorEqualFSR_Parms
		{
			FRotator NR;
			FSafeRotator FSR;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetRotatorEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetRotatorEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetRotatorEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_SetRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_SetRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Rotator EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Rotator = Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeBoolEqualBool()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms
		{
			FSafeBool FSB;
			bool NB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeBoolEqualBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(NB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms, bool);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(NB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), 0x0010000008000180, CPP_BOOL_PROPERTY_BITMASK(NB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), sizeof(bool), true);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualBool_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Bool EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Bool = Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeBoolEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms
		{
			FSafeBool FSB;
			FSafeBool SSB;
			bool Output;
			FSafeBool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeBoolEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeBool());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms, bool);
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(Output, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms), sizeof(bool), true);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetSafeBoolEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeBool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Bool)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Bool EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Bool = Safe Bool"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeByteEqualByte()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms
		{
			FSafeByte FSB;
			uint8 NB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeByteEqualByte"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms), 0x0010000000000180);
			UProperty* NewProp_NB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NB"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NB, SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms), 0x0010000008000180);
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetSafeByteEqualByte_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Byte EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Byte = Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeByteEqualFSB()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms
		{
			FSafeByte FSB;
			FSafeByte SSB;
			uint8 Output;
			FSafeByte ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeByteEqualFSB"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms), 0x0010000000000180);
			UProperty* NewProp_SSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSB, SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			UProperty* NewProp_FSB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSB"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSB, SCLibrary_eventSCO_Pure_SetSafeByteEqualFSB_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeByte());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Byte)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Byte EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Byte = Safe Byte"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeColorEqualColor()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms
		{
			FSafeColor FSC;
			FLinearColor SSC;
			FLinearColor Output;
			FSafeColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeColorEqualColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_SSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSC, SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_SetSafeColorEqualColor_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Color EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Color = Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeColorEqualFSC()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms
		{
			FSafeColor FSC;
			FSafeColor SSC;
			FLinearColor Output;
			FSafeColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeColorEqualFSC"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_SSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSC, SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			UProperty* NewProp_FSC = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSC"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSC, SCLibrary_eventSCO_Pure_SetSafeColorEqualFSC_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Color)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Color EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Color = Safe Color"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeFloatEqualFloat()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms
		{
			FSafeFloat FSF;
			float NF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeFloatEqualFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_NF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NF"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NF, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms), 0x0010000008000180);
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFloat_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Float EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Float = Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeFloatEqualFSF()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms
		{
			FSafeFloat FSF;
			FSafeFloat SSF;
			float Output;
			FSafeFloat ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeFloatEqualFSF"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms), 0x0010000000000180);
			UProperty* NewProp_SSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSF, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			UProperty* NewProp_FSF = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSF"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSF, SCLibrary_eventSCO_Pure_SetSafeFloatEqualFSF_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeFloat());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Float)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Float EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Float = Safe Float"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeIntEqualFSI()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms
		{
			FSafeInt FSI;
			FSafeInt SSI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeIntEqualFSI"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms), 0x0010000000000180);
			UProperty* NewProp_SSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSI, SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_SetSafeIntEqualFSI_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Integer EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Integer = Safe Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeIntEqualInt()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms
		{
			FSafeInt FSI;
			int32 NI;
			int32 Output;
			FSafeInt ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeIntEqualInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeInt());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms), 0x0010000000000180);
			UProperty* NewProp_NI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NI"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NI, SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms), 0x0010000008000180);
			UProperty* NewProp_FSI = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSI"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSI, SCLibrary_eventSCO_Pure_SetSafeIntEqualInt_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeInt());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Integer)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Integer EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Integer = Integer"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeNameEqualFSN()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms
		{
			FSafeName FSN;
			FSafeName SSN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeNameEqualFSN"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms), 0x0010000000000180);
			UProperty* NewProp_SSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSN, SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_SetSafeNameEqualFSN_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Name EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Name = Safe Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeNameEqualName()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms
		{
			FSafeName FSN;
			FName NN;
			FName Output;
			FSafeName ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeNameEqualName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeName());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms), 0x0010000000000180);
			UProperty* NewProp_NN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NN"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(NN, SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms), 0x0010000008000180);
			UProperty* NewProp_FSN = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSN"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSN, SCLibrary_eventSCO_Pure_SetSafeNameEqualName_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeName());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Name)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Name EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Name = Name"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeRotatorEqualFSR()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms
		{
			FSafeRotator FSR;
			FSafeRotator SSR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeRotatorEqualFSR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_SSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSR, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualFSR_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Rotator EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Rotator = Safe Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeRotatorEqualRotator()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms
		{
			FSafeRotator FSR;
			FRotator NR;
			FRotator Output;
			FSafeRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeRotatorEqualRotator"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeRotator());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_NR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NR, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_FSR = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSR"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSR, SCLibrary_eventSCO_Pure_SetSafeRotatorEqualRotator_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Rotator)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Rotator EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Rotator = Rotator"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeStringEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms
		{
			FSafeString FSS;
			FSafeString SS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeStringEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms), 0x0010000000000180);
			UProperty* NewProp_SS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SS, SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_SetSafeStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe String EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe String = Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeStringEqualString()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms
		{
			FSafeString FSS;
			FString NS;
			FString Output;
			FSafeString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeStringEqualString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms), 0x0010000000000180);
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms), 0x0010000008000180);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_SetSafeStringEqualString_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe String EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe String = String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTextEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms
		{
			FSafeText FST;
			FSafeText ST;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeTextEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms), 0x0010000000000180);
			UProperty* NewProp_ST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ST, SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetSafeTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Text EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Text = Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTextEqualText()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms
		{
			FSafeText FST;
			FText NT;
			FText Output;
			FSafeText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeTextEqualText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms), 0x0010000000000180);
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms), 0x0010000008000180);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetSafeTextEqualText_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Text EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Text = Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTransformEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms
		{
			FSafeTransform FST;
			FSafeTransform SST;
			FTransform Output;
			FSafeTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeTransformEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_SST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SST, SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetSafeTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Transform EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Transform = Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeTransformEqualTransform()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms
		{
			FSafeTransform FST;
			FTransform SST;
			FTransform Output;
			FSafeTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeTransformEqualTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_SST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SST, SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetSafeTransformEqualTransform_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Transform EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Transform = Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector2DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms
		{
			FSafeVector2D FSV;
			FSafeVector2D SSV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector2DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector2D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector2D = Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector2DEqualVector2D()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms
		{
			FSafeVector2D FSV;
			FVector2D NV;
			FVector2D Output;
			FSafeVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector2DEqualVector2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector2DEqualVector2D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector2D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector2D = Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector3DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms
		{
			FSafeVector3D FSV;
			FSafeVector3D SSV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector3DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector3D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector3D = Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector3DEqualVector3D()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms
		{
			FSafeVector3D FSV;
			FVector NV;
			FVector Output;
			FSafeVector3D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector3DEqualVector3D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector3DEqualVector3D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector3D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector3D = Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector4DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms
		{
			FSafeVector4D FSV;
			FSafeVector4D SSV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector4DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_SSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SSV, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector4D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector4D = Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetSafeVector4DEqualVector4D()
	{
		struct SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms
		{
			FSafeVector4D FSV;
			FVector4 NV;
			FVector4 Output;
			FSafeVector4D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetSafeVector4DEqualVector4D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_Output = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Output"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Output, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetSafeVector4DEqualVector4D_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector4D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Safe Vector4D = Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetStringEqualFSS()
	{
		struct SCLibrary_eventSCO_Pure_SetStringEqualFSS_Parms
		{
			FString NS;
			FSafeString FSS;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetStringEqualFSS"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetStringEqualFSS_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetStringEqualFSS_Parms), 0x0010000000000580);
			UProperty* NewProp_FSS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSS"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSS, SCLibrary_eventSCO_Pure_SetStringEqualFSS_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeString());
			UProperty* NewProp_NS = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NS"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NS, SCLibrary_eventSCO_Pure_SetStringEqualFSS_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe String)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe String EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: String = Safe String"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetTextEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_SetTextEqualFST_Parms
		{
			FText NT;
			FSafeText FST;
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetTextEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetTextEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetTextEqualFST_Parms), 0x0010000000000580);
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetTextEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeText());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UTextProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_SetTextEqualFST_Parms), 0x0010000008000180);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Text EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Text = Safe Text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetTransformEqualFST()
	{
		struct SCLibrary_eventSCO_Pure_SetTransformEqualFST_Parms
		{
			FTransform NT;
			FSafeTransform FST;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetTransformEqualFST"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetTransformEqualFST_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetTransformEqualFST_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_FST = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FST"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FST, SCLibrary_eventSCO_Pure_SetTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeTransform());
			UProperty* NewProp_NT = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NT"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NT, SCLibrary_eventSCO_Pure_SetTransformEqualFST_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Transform)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Transform EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Transform = Safe Transform"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector2DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetVector2DEqualFSV_Parms
		{
			FVector2D NV;
			FSafeVector2D FSV;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetVector2DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetVector2DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetVector2DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector2D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetVector2DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector2D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector2D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Vector2D = Safe Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector3DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetVector3DEqualFSV_Parms
		{
			FVector NV;
			FSafeVector3D FSV;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetVector3DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetVector3DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetVector3DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector3D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetVector3DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector3D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector3D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Vector3D = Safe Vector3D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USCLibrary_SCO_Pure_SetVector4DEqualFSV()
	{
		struct SCLibrary_eventSCO_Pure_SetVector4DEqualFSV_Parms
		{
			FVector4 NV;
			FSafeVector4D FSV;
			FVector4 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USCLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SCO_Pure_SetVector4DEqualFSV"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SCLibrary_eventSCO_Pure_SetVector4DEqualFSV_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SCLibrary_eventSCO_Pure_SetVector4DEqualFSV_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector4());
			UProperty* NewProp_FSV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FSV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(FSV, SCLibrary_eventSCO_Pure_SetVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FSafeVector4D());
			UProperty* NewProp_NV = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NV"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NV, SCLibrary_eventSCO_Pure_SetVector4DEqualFSV_Parms), 0x0010000008000180, Z_Construct_UScriptStruct_FVector4());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Variables|Security"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("="));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("= (Safe Vector4D)"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Security Set Safe Vector4D EQUAL ="));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/Blueprints/SCLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set:: Vector4D = Safe Vector4D"));
#endif
		}
		return ReturnFunction;
	}
	DEFINE_VTABLE_PTR_HELPER_CTOR(USCLibrary);
	UPackage* Z_Construct_UPackage__Script_SCUE4()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SCUE4")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xD09577A0;
			Guid.B = 0xA0FC34E8;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
